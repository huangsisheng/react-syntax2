[{"D:\\study\\react\\react-syntax2\\src\\index.js":"1","D:\\study\\react\\react-syntax2\\src\\App.js":"2","D:\\study\\react\\react-syntax2\\src\\router\\index.js":"3","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js":"4","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js":"5","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js":"6","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js":"7","D:\\study\\react\\react-syntax2\\src\\router\\router.js":"8","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_Context\\index.js":"9","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\d_ErrorBorder\\index.js":"10","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\e_Refs\\index.js":"11"},{"size":408,"mtime":1611751634903,"results":"12","hashOfConfig":"13"},{"size":468,"mtime":1611751634903,"results":"14","hashOfConfig":"13"},{"size":2021,"mtime":1611761247823,"results":"15","hashOfConfig":"13"},{"size":1715,"mtime":1611757719457,"results":"16","hashOfConfig":"13"},{"size":2365,"mtime":1611837794852,"results":"17","hashOfConfig":"13"},{"size":376,"mtime":1611758415257,"results":"18","hashOfConfig":"13"},{"size":4992,"mtime":1611843964126,"results":"19","hashOfConfig":"13"},{"size":1379,"mtime":1611844878301,"results":"20","hashOfConfig":"13"},{"size":4992,"mtime":1611843964126,"results":"21","hashOfConfig":"13"},{"size":417,"mtime":1611844700987,"results":"22","hashOfConfig":"13"},{"size":413,"mtime":1611844863508,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"w9gos6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\study\\react\\react-syntax2\\src\\index.js",[],["49","50"],"D:\\study\\react\\react-syntax2\\src\\App.js",[],"D:\\study\\react\\react-syntax2\\src\\router\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js",["51"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 13:22:51\r\n * @LastEditTime: 2021-01-27 22:28:39\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\a_Accessbility\\index.js\r\n */\r\n\r\n/**\r\n * 无障碍: \r\n * 总结：\r\n * \r\n */\r\n\r\nimport { Component, Fragment } from \"react\";\r\n\r\n\r\n/* 1.语义化的html S */\r\n// 有时使用jsx会破坏html语义化，这种\r\n// function ListItem({ item }) {\r\n//     return (\r\n//         /* 短语法 */\r\n//         <>\r\n//             <dt>{item.term}</dt>\r\n//             <dd>{item.desc}</dd>\r\n//         </>\r\n//     )\r\n// }\r\n\r\nfunction Glossary(props) {\r\n    /* 和其他的元素一样，你可以把一系列的对象映射到一个 fragment 的数组中 */\r\n    return (\r\n        <dl>\r\n            {\r\n                props.items.map(item => (\r\n                    <Fragment key={item.id}>\r\n                        <dt>{item.term}</dt>\r\n                        <dd>{item.desc}</dd>\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </dl>\r\n    )\r\n}\r\n/* 1.语义化的html E */\r\n\r\n// for 在react中是 htmlFor\r\n{/* <label htmlFor=\"namedInput\">Name:</label>\r\n<input id=\"namedInput\" type=\"text\" name=\"name\"/> */}\r\n\r\nexport default class Accessbility extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [\r\n                {\r\n                    id: 1,\r\n                    desc: 'aaa',\r\n                    term: 'a1'\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Glossary items={this.state.items}></Glossary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\router\\router.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_Context\\index.js",["52","53","54","55","56"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 23:01:33\r\n * @LastEditTime: 2021-01-28 22:25:57\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\guideManage\\c_context\\index.js\r\n */\r\n\r\n/**\r\n * Context \r\n * 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。\r\n * 数据是通过 props 属性自上而下（由父及子）进行传递的\r\n */\r\nimport React, { Component } from 'react'\r\n\r\n// 1.何时使用react：\r\n/**\r\n * Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，\r\n * 例如当前认证的用户、主题或首选语言。\r\n * Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\r\n * 参考 vue 的provider/inject\r\n */\r\n// 为当前的 theme 创建一个 context（“light”为默认值）。\r\nconst ContextTheme = React.createContext('light')\r\n\r\nclass App extends Component {\r\n    constructor(props) { super(props) }\r\n    render() {\r\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\r\n        // 无论多深，任何组件都能读取这个值。\r\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\r\n        // ContextTheme._currentValue：默认值\r\n        console.log(ContextTheme)\r\n        return (\r\n            <ContextTheme.Provider value=\"light\">\r\n                <Toolbar />\r\n            </ContextTheme.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// 中间组件不必再往下传递\r\nfunction Toolbar() {\r\n    return (<div><ThemeButton /></div>)\r\n}\r\nclass ThemeButton extends Component {\r\n    static contextType = ContextTheme\r\n    render() {\r\n        console.log(this.context)\r\n        return (\r\n            <button theme={this.context}>主题是：{this.context}</button>\r\n        )\r\n    }\r\n}\r\n\r\n// b.使用Context之前的考虑：\r\n/**\r\n * Context主要用于很多不同层级的组件需要访问同样的数据，\r\n * 可能会使得组件的复用性变差，故需谨慎使用\r\n * \r\n * 如果你只是想避免层层传递一些属性，组件组合有时候是一个比 context 更好的解决方案。\r\n */\r\n\r\n// c.API使用：\r\nconst defaultValue = 'defaultValue'\r\nconst MyContext = React.createContext(defaultValue)\r\n/**\r\n * 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，\r\n * 这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\r\n * \r\n * 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。\r\n * 这有助于在不使用 Provider 包装组件的情况下对组件进行测试。\r\n * 注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效。\r\n * \r\n */\r\n\r\n// (<MyContext.Provider value={'某个值'} ></MyContext.Provider>)\r\n\r\n/**\r\n * 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化\r\n * \r\n * 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。\r\n * Provider 及其内部 消费者(consumer) 组件都不受制于 shouldComponentUpdate 函数，\r\n * 因此当 消费者(consumer) 组件在其祖先组件退出更新的情况下也能更新。\r\n * \r\n * 通过新旧值检测来确定变化，使用了与 Object.is 相同的算法。\r\n */\r\n\r\n// class.contentType:\r\n\r\nclass MyClass extends Component {\r\n    static contextType = MyContext\r\n    componentDidMount() {\r\n        let value = this.context\r\n        /* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */\r\n    }\r\n    componentDidUpdate() {\r\n        let value = this.context\r\n    }\r\n    componentWillUnmount() {\r\n        let value = this.context\r\n    }\r\n    render() {\r\n        let value = this.context;\r\n        return ({ value })\r\n        /* 基于 MyContext 组件的值进行渲染 */\r\n    }\r\n}\r\n// MyClass.contextType = MyContext\r\n/**\r\n * 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext()\r\n *  创建的 Context 对象。这能让你使用 this.context 来消费最近 Context 上的那个值。\r\n * 你可以在任何生命周期中访问到它，包括 render 函数中\r\n */\r\n\r\n// Context.Consumer\r\n<MyContext.Consumer>\r\n    {value => value}\r\n    {/* {value =>  基于 context 值进行渲染 } */}\r\n</MyContext.Consumer>\r\n\r\n// Context.displayName\r\nMyContext.displayName = 'MyDisplayName' //类型为字符串\r\n// < MyContext.Provider > // \"MyDisplayName.Provider\" 在 DevTools 中\r\n// <MyContext.Consumer> // \"MyDisplayName.Consumer\" 在 DevTools 中\r\n\r\n\r\n/* 动态 Context */\r\n\r\nexport default class Context extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <App />\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\d_ErrorBorder\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\e_Refs\\index.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":49,"column":1,"nodeType":"63","messageId":"64","endLine":50,"endColumn":53},{"ruleId":"65","severity":1,"message":"66","line":28,"column":5,"nodeType":"67","messageId":"68","endLine":28,"endColumn":40},{"ruleId":"69","severity":1,"message":"70","line":92,"column":7,"nodeType":"71","messageId":"72","endLine":92,"endColumn":14},{"ruleId":"69","severity":1,"message":"73","line":95,"column":13,"nodeType":"71","messageId":"72","endLine":95,"endColumn":18},{"ruleId":"69","severity":1,"message":"73","line":99,"column":13,"nodeType":"71","messageId":"72","endLine":99,"endColumn":18},{"ruleId":"69","severity":1,"message":"73","line":102,"column":13,"nodeType":"71","messageId":"72","endLine":102,"endColumn":18},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'MyClass' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]