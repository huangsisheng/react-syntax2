[{"D:\\study\\react\\react-syntax2\\src\\index.js":"1","D:\\study\\react\\react-syntax2\\src\\App.js":"2","D:\\study\\react\\react-syntax2\\src\\router\\index.js":"3","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js":"4","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js":"5","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js":"6","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js":"7","D:\\study\\react\\react-syntax2\\src\\router\\router.js":"8","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_Context\\index.js":"9","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\d_ErrorBorder\\index.js":"10","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\e_Refs\\index.js":"11","D:\\study\\react\\react-syntax2\\src\\utils\\captureError.js":"12","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\f_Fragment\\index.js":"13","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\i_ThoroughJsx\\index.js":"14","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\h_TeamWorks\\index.js":"15","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\g_HighComp\\index.js":"16","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\k_Portals\\index.js":"17","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\j_Performance\\index.js":"18"},{"size":408,"mtime":1611751634903,"results":"19","hashOfConfig":"20"},{"size":468,"mtime":1611751634903,"results":"21","hashOfConfig":"20"},{"size":2021,"mtime":1612082383896,"results":"22","hashOfConfig":"20"},{"size":1715,"mtime":1611757719457,"results":"23","hashOfConfig":"20"},{"size":2365,"mtime":1611837794852,"results":"24","hashOfConfig":"20"},{"size":376,"mtime":1611758415257,"results":"25","hashOfConfig":"20"},{"size":4992,"mtime":1611843964126,"results":"26","hashOfConfig":"20"},{"size":2030,"mtime":1612100595590,"results":"27","hashOfConfig":"20"},{"size":4992,"mtime":1612059619040,"results":"28","hashOfConfig":"20"},{"size":1850,"mtime":1612064940990,"results":"29","hashOfConfig":"20"},{"size":5279,"mtime":1612099582300,"results":"30","hashOfConfig":"20"},{"size":330,"mtime":1612062549065,"results":"31","hashOfConfig":"20"},{"size":2075,"mtime":1612101474688,"results":"32","hashOfConfig":"20"},{"size":466,"mtime":1612100327617,"results":"33","hashOfConfig":"20"},{"size":464,"mtime":1612100308558,"results":"34","hashOfConfig":"20"},{"size":467,"mtime":1612102084730,"results":"35","hashOfConfig":"20"},{"size":464,"mtime":1612100347047,"results":"36","hashOfConfig":"20"},{"size":466,"mtime":1612100570344,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"w9gos6",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\study\\react\\react-syntax2\\src\\index.js",[],["80","81"],"D:\\study\\react\\react-syntax2\\src\\App.js",[],"D:\\study\\react\\react-syntax2\\src\\router\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js",["82"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 13:22:51\r\n * @LastEditTime: 2021-01-27 22:28:39\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\a_Accessbility\\index.js\r\n */\r\n\r\n/**\r\n * 无障碍: \r\n * 总结：\r\n * \r\n */\r\n\r\nimport { Component, Fragment } from \"react\";\r\n\r\n\r\n/* 1.语义化的html S */\r\n// 有时使用jsx会破坏html语义化，这种\r\n// function ListItem({ item }) {\r\n//     return (\r\n//         /* 短语法 */\r\n//         <>\r\n//             <dt>{item.term}</dt>\r\n//             <dd>{item.desc}</dd>\r\n//         </>\r\n//     )\r\n// }\r\n\r\nfunction Glossary(props) {\r\n    /* 和其他的元素一样，你可以把一系列的对象映射到一个 fragment 的数组中 */\r\n    return (\r\n        <dl>\r\n            {\r\n                props.items.map(item => (\r\n                    <Fragment key={item.id}>\r\n                        <dt>{item.term}</dt>\r\n                        <dd>{item.desc}</dd>\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </dl>\r\n    )\r\n}\r\n/* 1.语义化的html E */\r\n\r\n// for 在react中是 htmlFor\r\n{/* <label htmlFor=\"namedInput\">Name:</label>\r\n<input id=\"namedInput\" type=\"text\" name=\"name\"/> */}\r\n\r\nexport default class Accessbility extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [\r\n                {\r\n                    id: 1,\r\n                    desc: 'aaa',\r\n                    term: 'a1'\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Glossary items={this.state.items}></Glossary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\router\\router.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_Context\\index.js",["83","84","85","86","87"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 23:01:33\r\n * @LastEditTime: 2021-01-31 10:19:45\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\guideManage\\c_context\\index.js\r\n */\r\n\r\n/**\r\n * Context \r\n * 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。\r\n * 数据是通过 props 属性自上而下（由父及子）进行传递的\r\n */\r\nimport React, { Component } from 'react'\r\n\r\n// 1.何时使用react：\r\n/**\r\n * Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，\r\n * 例如当前认证的用户、主题或首选语言。\r\n * Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\r\n * 参考 vue 的provider/inject\r\n */\r\n// 为当前的 theme 创建一个 context（“light”为默认值）。\r\nconst ContextTheme = React.createContext('light')\r\n\r\nclass App extends Component {\r\n    constructor(props) { super(props) }\r\n    render() {\r\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\r\n        // 无论多深，任何组件都能读取这个值。\r\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\r\n        // ContextTheme._currentValue：默认值\r\n        console.log(ContextTheme)\r\n        return (\r\n            <ContextTheme.Provider value=\"light\">\r\n                <Toolbar />\r\n            </ContextTheme.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// 中间组件不必再往下传递\r\nfunction Toolbar() {\r\n    return (<div><ThemeButton /></div>)\r\n}\r\nclass ThemeButton extends Component {\r\n    static contextType = ContextTheme\r\n    render() {\r\n        console.log(this.context)\r\n        return (\r\n            <button theme={this.context}>主题是：{this.context}</button>\r\n        )\r\n    }\r\n}\r\n\r\n// b.使用Context之前的考虑：\r\n/**\r\n * Context主要用于很多不同层级的组件需要访问同样的数据，\r\n * 可能会使得组件的复用性变差，故需谨慎使用\r\n * \r\n * 如果你只是想避免层层传递一些属性，组件组合有时候是一个比 context 更好的解决方案。\r\n */\r\n\r\n// c.API使用：\r\nconst defaultValue = 'defaultValue'\r\nconst MyContext = React.createContext(defaultValue)\r\n/**\r\n * 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，\r\n * 这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\r\n * \r\n * 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。\r\n * 这有助于在不使用 Provider 包装组件的情况下对组件进行测试。\r\n * 注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效。\r\n * \r\n */\r\n\r\n// (<MyContext.Provider value={'某个值'} ></MyContext.Provider>)\r\n\r\n/**\r\n * 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化\r\n * \r\n * 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。\r\n * Provider 及其内部 消费者(consumer) 组件都不受制于 shouldComponentUpdate 函数，\r\n * 因此当 消费者(consumer) 组件在其祖先组件退出更新的情况下也能更新。\r\n * \r\n * 通过新旧值检测来确定变化，使用了与 Object.is 相同的算法。\r\n */\r\n\r\n// class.contentType:\r\n\r\nclass MyClass extends Component {\r\n    static contextType = MyContext\r\n    componentDidMount() {\r\n        let value = this.context\r\n        /* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */\r\n    }\r\n    componentDidUpdate() {\r\n        let value = this.context\r\n    }\r\n    componentWillUnmount() {\r\n        let value = this.context\r\n    }\r\n    render() {\r\n        let value = this.context;\r\n        return ({ value })\r\n        /* 基于 MyContext 组件的值进行渲染 */\r\n    }\r\n}\r\n// MyClass.contextType = MyContext\r\n/**\r\n * 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext()\r\n *  创建的 Context 对象。这能让你使用 this.context 来消费最近 Context 上的那个值。\r\n * 你可以在任何生命周期中访问到它，包括 render 函数中\r\n */\r\n\r\n// Context.Consumer\r\n<MyContext.Consumer>\r\n    {value => value}\r\n    {/* {value =>  基于 context 值进行渲染 } */}\r\n</MyContext.Consumer>\r\n\r\n// Context.displayName\r\nMyContext.displayName = 'MyDisplayName' //类型为字符串\r\n// < MyContext.Provider > // \"MyDisplayName.Provider\" 在 DevTools 中\r\n// <MyContext.Consumer> // \"MyDisplayName.Consumer\" 在 DevTools 中\r\n\r\n\r\n/* 动态 Context */\r\n\r\nexport default class Context extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <App />\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\d_ErrorBorder\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\e_Refs\\index.js",["88"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-28 22:35:44\r\n * @LastEditTime: 2021-01-31 21:26:15\r\n * @LastEditors: Please set LastEditors\r\n * @Description: ref转发\r\n * @FilePath: \\react-syntax2\\src\\views\\d_ErrorBorder\\index.js\r\n */\r\nimport React, { Component, useRef } from \"react\";\r\n/**\r\n * 类似于vue 的ref,访问子组件或者某个DOM元素\r\n * \r\n * Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素\r\n * \r\n * Ref 转发是一项将 ref 自动地通过组件传递到其一子组件的技巧\r\n */\r\n\r\n// 1. 创建refs: React.createRef()\r\n/* \r\n * 注：\r\n * a.当 ref 属性用于 HTML 元素时，构造函数中使用 React.createRef() 创建的 ref 接收底层 DOM 元素作为其 current 属性。\r\n * b.当 ref 属性用于自定义 class 组件时，ref 对象接收组件的挂载实例作为其 current 属性。\r\n * c.你不能在函数组件上使用 ref 属性，因为他们没有实例;但只要它指向一个 DOM 元素或 class 组件。\r\n */\r\n/* class MyComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n    }\r\n    render() {\r\n        // 访问refs\r\n        console.log(this.myRef.current)\r\n        return (<div ref={this.myRef}></div>)\r\n    }\r\n}\r\n */\r\n/* \r\nReact 会在组件挂载时给 current 属性传入 DOM 元素，并在组件卸载时传入 null 值。\r\nref 会在 componentDidMount 或 componentDidUpdate 生命周期钩子触发前更新。\r\n*/\r\n// class CustomTextInput extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         // 创建一个ref 来存储textInput的 DOM元素\r\n//         // this.textInput = React.createRef()\r\n//         console.log(props)\r\n//         this.focusInput = this.focusInput.bind(this)\r\n//     }\r\n\r\n//     focusInput() {\r\n//         // 直接使用原生 API 使 text 输入框获得焦点\r\n//         // 注意：我们通过 \"current\" 来访问 DOM 节点\r\n//         // 类似于vue中，$refs[xxx]，访问ref元素的方式\r\n//         console.log(this.textInput)\r\n//         this.textInput.current.focus()\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {/* 类似 vue 中，在子组件上或者DOM元素添加 ref */}\r\n//                 <input type=\"text\" ref={this.textInput} />\r\n//                 <input type=\"button\" value=\"获得焦点\" onClick={this.focusInput} />\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// \r\n// function CustomTextInput(props) {\r\n//     const textInput = useRef()\r\n\r\n//     const handleClick = () => {\r\n//         textInput.current.focus()\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             {/* 类似 vue 中，在子组件上或者DOM元素添加 ref */}\r\n//             <input type=\"text\" ref={textInput} />\r\n//             <input type=\"button\" value=\"获得焦点\" onClick={handleClick} />\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n\r\n// 回调refs\r\n/* \r\n不同于传递 createRef() 创建的 ref 属性，你会传递一个函数。这个函数中接受 React 组件实例\r\n或 HTML DOM 元素作为参数，以使它们能在其他地方被存储和访问。 */\r\n// class CustomTextInput extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.textInput = null\r\n//         this.setTextRefInput = element => {\r\n//             this.textInput = element\r\n//         }\r\n\r\n//         // 使用原生DOM API使其获得焦点\r\n//         this.focusInput = () => {\r\n//             this.textInput && this.textInput.focus()\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount(){\r\n//         this.focusInput()\r\n//     }\r\n\r\n//     render(){\r\n//         return (\r\n//             <div>\r\n//                 <input type=\"text\" ref={this.setTextRefInput}/>\r\n//                 <input type=\"button\" value=\"获得焦点\" onClick={this.focusInput}/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\nfunction CustomTextInput(props) {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" ref={props.inputRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n/* \r\n第二个参数 ref 只在使用 React.forwardRef 定义组件时存在。\r\n常规函数和 class 组件不接收 ref 参数，且 props 中也不存在 ref。\r\n*/\r\n\r\nconst FancyButton = React.forwardRef((props, ref) => {\r\n    return <button className=\"FancyButton\" ref={ref}>{props.children}</button>\r\n})\r\n\r\nconst _ref = React.createRef()\r\n\r\nexport default class RefsCon extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.inputElement = null\r\n    }\r\n    componentDidMount(){\r\n        this.inputElement.focus()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <CustomTextInput /> */}\r\n                <CustomTextInput inputRef={el => this.inputElement = el}/>\r\n                <FancyButton ref={_ref}>点我</FancyButton> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n    \r\n/* \r\n在上面的例子中，RefsCont 把它的 refs 回调函数当作 inputRef props 传递给了 \r\nCustomTextInput，而且 CustomTextInput 把相同的函数作为特殊的 ref 属性传递给了 <input>。\r\n结果是，在 RefsCont 中的 this.inputElement 会被设置为与 CustomTextInput 中\r\n的 input 元素相对应的 DOM 节点。\r\n*/","D:\\study\\react\\react-syntax2\\src\\utils\\captureError.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\f_Fragment\\index.js",["89","90"],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\i_ThoroughJsx\\index.js",["91","92","93"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-28 22:35:44\r\n * @LastEditTime: 2021-01-31 21:38:47\r\n * @LastEditors: Please set LastEditors\r\n * @Description: Fragment\r\n * @FilePath: \\react-syntax2\\src\\views\\d_ErrorBorder\\index.js\r\n */\r\nimport React, { Component, Fragment } from \"react\";\r\n\r\nexport default class ThoroughJSX extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            123\r\n        )\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\h_TeamWorks\\index.js",["94","95","96"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-28 22:35:44\r\n * @LastEditTime: 2021-01-31 21:38:28\r\n * @LastEditors: Please set LastEditors\r\n * @Description: Fragment\r\n * @FilePath: \\react-syntax2\\src\\views\\d_ErrorBorder\\index.js\r\n */\r\nimport React, { Component, Fragment } from \"react\";\r\n\r\nexport default class TeamWorks extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            123\r\n        )\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\g_HighComp\\index.js",["97","98","99"],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\k_Portals\\index.js",["100","101","102"],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\j_Performance\\index.js",["103","104","105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":49,"column":1,"nodeType":"112","messageId":"113","endLine":50,"endColumn":53},{"ruleId":"114","severity":1,"message":"115","line":28,"column":5,"nodeType":"116","messageId":"117","endLine":28,"endColumn":40},{"ruleId":"118","severity":1,"message":"119","line":92,"column":7,"nodeType":"120","messageId":"121","endLine":92,"endColumn":14},{"ruleId":"118","severity":1,"message":"122","line":95,"column":13,"nodeType":"120","messageId":"121","endLine":95,"endColumn":18},{"ruleId":"118","severity":1,"message":"122","line":99,"column":13,"nodeType":"120","messageId":"121","endLine":99,"endColumn":18},{"ruleId":"118","severity":1,"message":"122","line":102,"column":13,"nodeType":"120","messageId":"121","endLine":102,"endColumn":18},{"ruleId":"118","severity":1,"message":"123","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":34},{"ruleId":"114","severity":1,"message":"115","line":13,"column":5,"nodeType":"116","messageId":"117","endLine":15,"endColumn":6},{"ruleId":"114","severity":1,"message":"115","line":44,"column":5,"nodeType":"116","messageId":"117","endLine":46,"endColumn":6},{"ruleId":"118","severity":1,"message":"124","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"125","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":12,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":6},{"ruleId":"118","severity":1,"message":"124","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"125","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":12,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":6},{"ruleId":"118","severity":1,"message":"124","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"125","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":12,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":6},{"ruleId":"118","severity":1,"message":"124","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"125","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":12,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":6},{"ruleId":"118","severity":1,"message":"124","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"125","line":9,"column":28,"nodeType":"120","messageId":"121","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":12,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":6},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'MyClass' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","'useRef' is defined but never used.","'React' is defined but never used.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]