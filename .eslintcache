[{"D:\\study\\react\\react-syntax2\\src\\index.js":"1","D:\\study\\react\\react-syntax2\\src\\App.js":"2","D:\\study\\react\\react-syntax2\\src\\router\\index.js":"3","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js":"4","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js":"5","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js":"6","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js":"7","D:\\study\\react\\react-syntax2\\src\\router\\router.js":"8"},{"size":408,"mtime":1611751634903,"results":"9","hashOfConfig":"10"},{"size":468,"mtime":1611751634903,"results":"11","hashOfConfig":"10"},{"size":2021,"mtime":1611761247823,"results":"12","hashOfConfig":"10"},{"size":1715,"mtime":1611757719457,"results":"13","hashOfConfig":"10"},{"size":2337,"mtime":1611759409347,"results":"14","hashOfConfig":"10"},{"size":376,"mtime":1611758415257,"results":"15","hashOfConfig":"10"},{"size":662,"mtime":1611760705343,"results":"16","hashOfConfig":"10"},{"size":1169,"mtime":1611761269977,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w9gos6",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\study\\react\\react-syntax2\\src\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\App.js",[],"D:\\study\\react\\react-syntax2\\src\\router\\index.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\a_Accessbility\\index.js",["38"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 13:22:51\r\n * @LastEditTime: 2021-01-27 22:28:39\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\a_Accessbility\\index.js\r\n */\r\n\r\n/**\r\n * 无障碍: \r\n * 总结：\r\n * \r\n */\r\n\r\nimport { Component, Fragment } from \"react\";\r\n\r\n\r\n/* 1.语义化的html S */\r\n// 有时使用jsx会破坏html语义化，这种\r\n// function ListItem({ item }) {\r\n//     return (\r\n//         /* 短语法 */\r\n//         <>\r\n//             <dt>{item.term}</dt>\r\n//             <dd>{item.desc}</dd>\r\n//         </>\r\n//     )\r\n// }\r\n\r\nfunction Glossary(props) {\r\n    /* 和其他的元素一样，你可以把一系列的对象映射到一个 fragment 的数组中 */\r\n    return (\r\n        <dl>\r\n            {\r\n                props.items.map(item => (\r\n                    <Fragment key={item.id}>\r\n                        <dt>{item.term}</dt>\r\n                        <dd>{item.desc}</dd>\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </dl>\r\n    )\r\n}\r\n/* 1.语义化的html E */\r\n\r\n// for 在react中是 htmlFor\r\n{/* <label htmlFor=\"namedInput\">Name:</label>\r\n<input id=\"namedInput\" type=\"text\" name=\"name\"/> */}\r\n\r\nexport default class Accessbility extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [\r\n                {\r\n                    id: 1,\r\n                    desc: 'aaa',\r\n                    term: 'a1'\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Glossary items={this.state.items}></Glossary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n",["39","40"],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\index.js",["41"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 17:41:24\r\n * @LastEditTime: 2021-01-27 22:56:49\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\guideManage\\b_code\\index.js\r\n */\r\n\r\n/**\r\n* 代码分割:\r\n* 总结：\r\n* 优点：减小包的体积，“懒加载”，初始化加载的时候减少所需的代码量\r\n*\r\n*/\r\nimport React, { Component, Suspense, lazy } from \"react\";\r\n\r\n/* React.lazy S */\r\n\r\n/* \r\n    a.参见vue异步组件：() => import('./my-async-component')\r\n\r\n    b.React.lazy 和 Suspense 技术还不支持服务端渲染。如果你想要在使用服务端渲染的应用中使用，\r\n    我们推荐 Loadable Components 这个库。它有一个很棒的服务端渲染打包指南。\r\n\r\n    c.React.lazy 接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，\r\n    该 Promise 需要 resolve 一个 default export 的 React 组件\r\n\r\n    d.然后应在 Suspense 组件中渲染 lazy 组件(优雅降级)\r\n */\r\nconst OtherComponent = React.lazy(() => import('./OtherComponent'))\r\n\r\nfunction MyCom() {\r\n    return (\r\n        /* Suspense 可以包裹多个懒加载组件 */\r\n        /* fallback 属性接受任何在组件加载过程中你想展示的 React 元素 */\r\n        <div>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n                <OtherComponent />\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\n/* React.lazy E */\r\n\r\n\r\n\r\n/* 基于路由的代码分割 S */\r\n// 参见 vue的路由懒加载：\r\n// const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\r\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n/* const Home = lazy(() => import('./routes/Home'));\r\nconst About = lazy(() => import('./routes/About'));\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/about\" component={About} />\r\n            </Switch>\r\n        </Suspense>\r\n    </Router>\r\n); */\r\n/* 基于路由的代码分割 E */\r\n\r\nexport default class CodeSplit extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MyCom />\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\b_CodeSplit\\OtherComponent.js",[],"D:\\study\\react\\react-syntax2\\src\\views\\guideManage\\c_context\\index.js",["42"],"/*\r\n * @Author: your name\r\n * @Date: 2021-01-27 23:01:33\r\n * @LastEditTime: 2021-01-27 23:18:25\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\react-syntax2\\src\\views\\guideManage\\c_context\\index.js\r\n */\r\n\r\n/**\r\n * Context \r\n * 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。\r\n */\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Context extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {'context'}\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\study\\react\\react-syntax2\\src\\router\\router.js",[],{"ruleId":"43","severity":1,"message":"44","line":49,"column":1,"nodeType":"45","messageId":"46","endLine":50,"endColumn":53},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":16,"column":38,"nodeType":"53","messageId":"54","endLine":16,"endColumn":42},{"ruleId":"55","severity":1,"message":"56","line":17,"column":5,"nodeType":"57","messageId":"58","endLine":19,"endColumn":6},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]